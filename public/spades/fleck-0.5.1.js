minispade.register('fleck', "(function() {/*!\n  * fleck - functional style string inflections\n  * https://github.com/trek/fleck\n  * copyright Trek Glowacki\n  * MIT License\n  */\n  \n!function (name, definition) {\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n}('fleck', function () {\n  \n  var lib = {\n    // plural rules, singular rules, and starting uncountables\n    // from http://code.google.com/p/inflection-js/\n    // with corrections for ordering and spelling\n    pluralRules: [\n      [new RegExp('(m)an$', 'gi'),                 '$1en'],\n      [new RegExp('(pe)rson$', 'gi'),              '$1ople'],\n      [new RegExp('(child)$', 'gi'),               '$1ren'],\n      [new RegExp('^(ox)$', 'gi'),                 '$1en'],\n      [new RegExp('(ax|test)is$', 'gi'),           '$1es'],\n      [new RegExp('(octop|vir)us$', 'gi'),         '$1i'],\n      [new RegExp('(alias|status)$', 'gi'),        '$1es'],\n      [new RegExp('(bu)s$', 'gi'),                 '$1ses'],\n      [new RegExp('(buffal|tomat|potat)o$', 'gi'), '$1oes'],\n      [new RegExp('([ti])um$', 'gi'),              '$1a'],\n      [new RegExp('sis$', 'gi'),                   'ses'],\n      [new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),  '$1$2ves'],\n      [new RegExp('(hive)$', 'gi'),                '$1s'],\n      [new RegExp('([^aeiouy]|qu)y$', 'gi'),       '$1ies'],\n      [new RegExp('(matr|vert|ind)ix|ex$', 'gi'),  '$1ices'],\n      [new RegExp('(x|ch|ss|sh)$', 'gi'),          '$1es'],\n      [new RegExp('([m|l])ouse$', 'gi'),           '$1ice'],\n      [new RegExp('(quiz)$', 'gi'),                '$1zes'],\n      [new RegExp('s$', 'gi'),                     's'],\n      [new RegExp('$', 'gi'),                      's']\n    ],\n    singularRules: [\n      [new RegExp('(m)en$', 'gi'),                                                       '$1an'],\n      [new RegExp('(pe)ople$', 'gi'),                                                    '$1rson'],\n      [new RegExp('(child)ren$', 'gi'),                                                  '$1'],\n      [new RegExp('([ti])a$', 'gi'),                                                     '$1um'],\n      [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi'), '$1$2sis'],\n      [new RegExp('(hive)s$', 'gi'),                                                     '$1'],\n      [new RegExp('(tive)s$', 'gi'),                                                     '$1'],\n      [new RegExp('(curve)s$', 'gi'),                                                    '$1'],\n      [new RegExp('([lr])ves$', 'gi'),                                                   '$1f'],\n      [new RegExp('([^fo])ves$', 'gi'),                                                  '$1fe'],\n      [new RegExp('([^aeiouy]|qu)ies$', 'gi'),                                           '$1y'],\n      [new RegExp('(s)eries$', 'gi'),                                                    '$1eries'],\n      [new RegExp('(m)ovies$', 'gi'),                                                    '$1ovie'],\n      [new RegExp('(x|ch|ss|sh)es$', 'gi'),                                              '$1'],\n      [new RegExp('([m|l])ice$', 'gi'),                                                  '$1ouse'],\n      [new RegExp('(bus)es$', 'gi'),                                                     '$1'],\n      [new RegExp('(o)es$', 'gi'),                                                       '$1'],\n      [new RegExp('(shoe)s$', 'gi'),                                                     '$1'],\n      [new RegExp('(cris|ax|test)es$', 'gi'),                                            '$1is'],\n      [new RegExp('(octop|vir)i$', 'gi'),                                                '$1us'],\n      [new RegExp('(alias|status)es$', 'gi'),                                            '$1'],\n      [new RegExp('^(ox)en', 'gi'),                                                      '$1'],\n      [new RegExp('(vert|ind)ices$', 'gi'),                                              '$1ex'],\n      [new RegExp('(matr)ices$', 'gi'),                                                  '$1ix'],\n      [new RegExp('(quiz)zes$', 'gi'),                                                   '$1'],\n      [new RegExp('s$', 'gi'),                                                           '']\n    ],\n    uncountableWords: {\n      'equipment': true,\n      'information': true,\n      'rice': true,\n      'money': true,\n      'species': true,\n      'series':true,\n      'fish':true,\n      'sheep':true,\n      'moose':true,\n      'deer':true, \n      'news':true\n    },\n    // Chain multiple inflections into a signle call\n    // Examples:\n    //   lib.inflect('     posts', 'strip', 'singularize', 'capitalize') == 'Post'\n    inflect: function(str){\n      for (var i = 1, l = arguments.length; i < l; i++) {\n        str = lib[arguments[i]](str);\n      };\n\n      return str;\n    },\n    // Uppercases the first letter and lowercases all other letters\n    // Examples:\n    //   lib.capitalize(\"message_properties\") == \"Message_properties\"\n    //   lib.capitalize(\"message properties\") == \"Message properties\"\n    capitalize: function(str) {\n      return str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();\n    },\n    // lib.camelize(\"message_properties\") == \"messageProperties\"\n    // lib.camelize('-moz-border-radius') == 'mozBorderRadius'\n    // lib.camelize(\"message_properties\", true) == \"MessageProperties\"\n    camelize: function(str, upper){\n      if (upper) { return lib.upperCamelize(str) };\n      return str.replace(/[-_]+(.)?/g, function(match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n    // lib.upperCamelize(\"message_properties\") == \"MessageProperties\"\n    upperCamelize: function(str){\n      return lib.camelize(lib.capitalize(str));\n    },\n    // Replaces all spaces or underscores with dashes\n    // Examples:\n    //   lib.dasherize(\"message_properties\") == \"message-properties\"\n    //   lib.dasherize(\"Message properties\") == \"Message-properties\"\n    dasherize: function(str){\n      return str.replace(/\\s|_/g, '-');\n    },\n    // turns number or string formatted number into ordinalize version\n    // Examples:\n    //   lib.ordinalize(4) == \"4th\"\n    //   lib.ordinalize(\"13\") == \"13th\"\n    //   lib.ordinalize(\"122\") == \"122nd\"\n    ordinalize: function(str){\n      var isTeen, r, n;\n      n = parseInt(str, 10) % 100;\n      isTeen = { 11: true, 12: true, 13: true}[n];\n      if(isTeen) {return str + 'th'};\n      n = parseInt(str, 10) % 10\n      switch(n) {\n      case 1:\n        r = str + 'st';\n        break;\n      case 2:\n        r = str + 'nd';\n        break;\n      case 3:\n        r = str + 'rd';\n        break;\n      default:\n        r = str + 'th';\n      }\n      return r;\n    },\n    pluralize: function(str){\n      var uncountable = lib.uncountableWords[str.toLowerCase()];\n      if (uncountable) {\n        return str;\n      };\n      var rules = lib.pluralRules;\n      for(var i = 0, l = rules.length; i < l; i++){\n        if (str.match(rules[i][0])) {\n          str = str.replace(rules[i][0], rules[i][1]);\n          break;\n        };\n      }\n\n      return str;\n    },\n    singularize: function(str){\n      var uncountable = lib.uncountableWords[str.toLowerCase()];\n      if (uncountable) {\n        return str;\n      };\n      var rules = lib.singularRules;\n      for(var i = 0, l = rules.length; i < l; i++){\n        if (str.match(rules[i][0])) {\n          str = str.replace(rules[i][0], rules[i][1]);\n          break;\n        };\n      }\n\n      return str;\n    },\n    // Removes leading and trailing whitespace\n    // Examples:\n    //    lib.strip(\"    hello world!    \") == \"hello world!\"\n    strip: function(str){\n      // implementation from Prototype.js\n      return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    },\n    // Converts a camelized string into a series of words separated by an\n    // underscore (`_`).\n    // Examples\n    //   lib.underscore('borderBottomWidth') == \"border_bottom_width\"\n    //   lib.underscore('border-bottom-width') == \"border_bottom_width\"\n    //   lib.underscore('Foo::Bar') == \"foo_bar\"\n    //   lib.underscore('Foo.Bar') == \"foo_bar\"\n    underscore: function(str){\n      // implementation from Prototype.js\n      return str.replace(/::/g, '_')\n                .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n                .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n                .replace(/[-\\.]/g, '_')\n                .toLowerCase();\n    },\n    \n    // add an uncountable word\n    // fleck.uncountable('ninja', 'tsumani');\n    uncountable: function(){\n      for(var i=0,l=arguments.length; i<l; i++){\n        lib.uncountableWords[arguments[i]] = true;\n      }\n      return lib;\n    }\n  };\n  \n  return lib;\n  \n});\n\n})();\n//@ sourceURL=fleck");